{"version":3,"sources":["services/authService.js","context/AuthContext.js","components/Auth/Login.js","services/api.js","components/User/UserForm.js","components/User/UserCreate.js","components/Dashboard/AdminDashboard.js","services/clientService.js","components/Client/ClientList.js","components/Client/ClientForm.js","services/documentService.js","components/Client/DocumentManager.js","components/Client/ClientDetail.js","components/Client/ClientManager.js","components/Dashboard/UserDashboard.js","components/Auth/ProtectedRoute.js","components/Layout/Header.js","components/Layout/Sidebar.js","components/Layout/Footer.js","App.js","index.js"],"names":["API_URL","authService","async","username","password","response","axios","post","data","token","localStorage","setItem","JSON","stringify","logout","removeItem","getCurrentUser","parse","getItem","AuthContext","createContext","AuthProvider","_ref","children","user","setUser","useState","loading","setLoading","useEffect","currentUser","error","console","fetchUser","_jsx","Provider","value","login","loggedInUser","Login","setUsername","setPassword","setError","history","useHistory","useContext","className","_jsxs","onSubmit","e","preventDefault","userData","role","Error","push","htmlFor","type","id","onChange","target","required","disabled","api","create","baseURL","headers","interceptors","request","use","config","userStr","Authorization","Promise","reject","status","window","location","href","message","initialFormState","UserForm","onSave","onCancel","formData","setFormData","errors","setErrors","submitError","setSubmitError","isEditMode","_id","handleChange","name","prev","validateForm","newErrors","trim","length","Object","keys","_error$response","_error$response$data","onClick","UserCreate","setMessage","createUser","err","_err$response","_err$response$data","errorMessage","AdminDashboard","users","setUsers","clients","setClients","stats","setStats","totalUsers","totalClients","activeClients","isAddingUser","setIsAddingUser","editingUser","setEditingUser","setErrorMessage","passwordView","setPasswordView","userId","hashedPassword","isVisible","showPassword","passwordModalRef","useRef","fetchUsers","fetchStats","handleClickOutside","event","current","contains","document","addEventListener","removeEventListener","get","getUsers","prevStats","handleUserSaved","handleCancelUserForm","handleDeleteUser","confirm","delete","deleteUser","handleViewPassword","getUserPassword","handleAddUser","map","handleEditUser","colSpan","style","textAlign","ref","togglePasswordVisibility","clientService","getClients","getClient","clientId","createClient","clientData","updateClient","put","deleteClient","ClientList","onClientSelect","onCreateClient","searchTerm","setSearchTerm","fetchClients","filteredClients","filter","client","toLowerCase","includes","email","phone","panNumber","gstNumber","placeholder","_Fragment","clientType","handleDeleteClient","address","services","notes","serviceOptions","clientTypeOptions","ClientForm","test","replace","savedClient","service","checked","s","handleServiceChange","rows","documentService","uploadDocument","file","FormData","append","getDocuments","getDocumentUrl","documentId","defaults","deleteDocument","DocumentManager","documents","setDocuments","uploading","setUploading","fileToUpload","setFileToUpload","fetchDocuments","warn","docs","files","size","fileInput","getElementById","doc","split","toUpperCase","bytes","toFixed","dateString","uploadedAt","Date","toLocaleDateString","day","month","year","rel","prevDocuments","handleDelete","ClientDetail","onEdit","onBack","createdAt","VIEW_MODES","ClientManager","viewMode","setViewMode","selectedClient","setSelectedClient","handleClientSelect","handleCreateClient","handleEditClient","handleBack","handleSaveClient","renderContent","UserDashboard","ProtectedRoute","component","Component","requiredRole","rest","Route","render","props","Redirect","to","pathname","state","from","Header","Link","Sidebar","collapsed","setCollapsed","toggleSidebar","NavLink","activeClassName","Footer","getFullYear","App","Router","Switch","path","exact","ReactDOM","React","StrictMode"],"mappings":"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","file":"static/js/main.bd93f2dc.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5001/api/auth/';\n\nconst login = async (username, password) => {\n    const response = await axios.post(API_URL + 'login', {\n        username,\n        password\n    });\n    if (response.data.token) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n    }\n    return response.data;\n};\n\nconst logout = () => {\n    localStorage.removeItem('user');\n};\n\nconst register = async (username, password, role) => {\n    const response = await axios.post(API_URL + 'register', {\n        username,\n        password,\n        role\n    });\n    return response.data;\n};\n\nconst getCurrentUser = () => {\n    return JSON.parse(localStorage.getItem('user'));\n};\n\nexport const authService = {\n    login,\n    logout,\n    register,\n    getCurrentUser\n};","import React, { createContext, useState, useEffect } from 'react';\nimport { authService } from '../services/authService';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n    const [user, setUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const fetchUser = async () => {\n            try {\n                const currentUser = await authService.getCurrentUser();\n                setUser(currentUser);\n            } catch (error) {\n                console.error(\"Failed to fetch user:\", error);\n                // Clear the invalid user data if there's an error\n                localStorage.removeItem('user');\n                setUser(null);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchUser();\n    }, []);\n\n    const login = async (username, password) => {\n        try {\n            const loggedInUser = await authService.login(username, password);\n            setUser(loggedInUser);\n            return loggedInUser;\n        } catch (error) {\n            console.error(\"Login failed:\", error);\n            throw error;\n        }\n    };\n\n    const logout = async () => {\n        await authService.logout();\n        setUser(null);\n    };\n\n    return (\n        <AuthContext.Provider value={{ user, loading, login, logout }}>\n            {children}\n        </AuthContext.Provider>\n    );\n};","import React, { useState, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { AuthContext } from '../../context/AuthContext';\nimport './Login.css';\n\nconst Login = () => {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState('');\n    const [loading, setLoading] = useState(false);\n    const history = useHistory();\n    const { login } = useContext(AuthContext);\n\n    const handleLogin = async (e) => {\n        e.preventDefault();\n        setError('');\n        setLoading(true);\n\n        try {\n            // Use the login function from AuthContext\n            const userData = await login(username, password);\n            \n            // Redirect based on user role\n            if (userData && userData.role) {\n                history.push(userData.role === 'admin' ? '/admin' : '/user');\n            } else {\n                throw new Error('Invalid user data returned');\n            }\n        } catch (error) {\n            setError('Invalid username or password');\n            console.error('Login error:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <div className=\"login-page\">\n            <div className=\"login-container\">\n                <div className=\"login-logo\">\n                    <h1>CA Client Manager</h1>\n                    <p>Manage your CA firm clients efficiently</p>\n                </div>\n                <div className=\"login-form-container\">\n                    <h2>Login</h2>\n                    {error && <p className=\"error-message\">{error}</p>}\n                    <form onSubmit={handleLogin} className=\"login-form\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"username\">Username</label>\n                            <input\n                                type=\"text\"\n                                id=\"username\"\n                                value={username}\n                                onChange={(e) => setUsername(e.target.value)}\n                                required\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"password\">Password</label>\n                            <input\n                                type=\"password\"\n                                id=\"password\"\n                                value={password}\n                                onChange={(e) => setPassword(e.target.value)}\n                                required\n                            />\n                        </div>\n                        <button \n                            type=\"submit\" \n                            className=\"login-button\"\n                            disabled={loading}\n                        >\n                            {loading ? 'Logging in...' : 'Login'}\n                        </button>\n                    </form>\n                    <div className=\"login-footer\">\n                        <p>© 2025 CA Client Management System</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Login;","import axios from 'axios';\n\nconst API_URL = 'http://localhost:5001/api'; // Update with your backend URL\n\nconst api = axios.create({\n    baseURL: API_URL,\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\n// Add a request interceptor to include the auth token in every request\napi.interceptors.request.use(\n    (config) => {\n        try {\n            const userStr = localStorage.getItem('user');\n            if (userStr) {\n                const user = JSON.parse(userStr);\n                if (user && user.token) {\n                    config.headers.Authorization = `Bearer ${user.token}`;\n                }\n            }\n        } catch (error) {\n            console.error('Error setting auth header:', error);\n        }\n        return config;\n    },\n    (error) => {\n        return Promise.reject(error);\n    }\n);\n\n// Add a response interceptor to handle token expiration\napi.interceptors.response.use(\n    (response) => {\n        return response;\n    },\n    (error) => {\n        if (error.response) {\n            if (error.response.status === 401) {\n                // Token expired or invalid, logout the user\n                localStorage.removeItem('user');\n                window.location.href = '/login';\n            } else if (error.response.status === 403) {\n                console.error('Permission denied. Please check your access rights.');\n            } else if (error.response.status === 500) {\n                console.error('Server error:', error.response.data);\n            }\n        } else if (error.request) {\n            // The request was made but no response was received\n            console.error('No response received from server:', error.request);\n        } else {\n            // Something happened in setting up the request that triggered an error\n            console.error('Error setting up request:', error.message);\n        }\n        return Promise.reject(error);\n    }\n);\n\n// Example API call to login\nexport const login = async (credentials) => {\n    const response = await api.post('/auth/login', credentials);\n    return response.data;\n};\n\n// Example API call to create a user\nexport const createUser = async (userData) => {\n    const response = await api.post('/users/create', userData);\n    return response.data;\n};\n\n// Example API call to get users\nexport const getUsers = async () => {\n    const response = await api.get('/users');\n    return response.data;\n};\n\n// Example API call to get clients\nexport const getClients = async () => {\n    const response = await api.get('/clients');\n    return response.data;\n};\n\n// API call to delete a user\nexport const deleteUser = async (userId) => {\n    const response = await api.delete(`/users/${userId}`);\n    return response.data;\n};\n\n// API call to view a user's password\nexport const getUserPassword = async (userId) => {\n    const response = await api.get(`/users/password/${userId}`);\n    return response.data;\n};\n\nexport default api;","import React, { useState, useEffect } from 'react';\nimport './UserForm.css';\n\nconst initialFormState = {\n    username: '',\n    password: '',\n    role: 'user'\n};\n\nconst UserForm = ({ user, onSave, onCancel }) => {\n    const [formData, setFormData] = useState(initialFormState);\n    const [errors, setErrors] = useState({});\n    const [loading, setLoading] = useState(false);\n    const [submitError, setSubmitError] = useState(null);\n    const isEditMode = !!user?._id;\n\n    useEffect(() => {\n        if (user) {\n            setFormData({\n                username: user.username || '',\n                password: '',  // Don't fill password field for security\n                role: user.role || 'user'\n            });\n        }\n    }, [user]);\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setFormData(prev => ({ ...prev, [name]: value }));\n        \n        // Clear error when field is updated\n        if (errors[name]) {\n            setErrors(prev => ({ ...prev, [name]: null }));\n        }\n    };\n\n    const validateForm = () => {\n        const newErrors = {};\n        \n        if (!formData.username.trim()) {\n            newErrors.username = 'Username is required';\n        } else if (formData.username.trim().length < 3) {\n            newErrors.username = 'Username must be at least 3 characters';\n        }\n        \n        if (!isEditMode && !formData.password.trim()) {\n            newErrors.password = 'Password is required';\n        } else if (!isEditMode && formData.password.trim().length < 6) {\n            newErrors.password = 'Password must be at least 6 characters';\n        }\n        \n        setErrors(newErrors);\n        return Object.keys(newErrors).length === 0;\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        \n        if (!validateForm()) return;\n        \n        setLoading(true);\n        setSubmitError(null);\n        \n        try {\n            // Only include password in payload if it's provided\n            const userData = {\n                username: formData.username,\n                role: formData.role\n            };\n            \n            if (formData.password.trim()) {\n                userData.password = formData.password;\n            }\n            \n            await onSave(userData, isEditMode);\n        } catch (error) {\n            console.error('Error saving user:', error);\n            setSubmitError(\n                error.response?.data?.message || \n                'Error saving user. Please try again.'\n            );\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <div className=\"user-form-container\">\n            <h2>{isEditMode ? 'Edit User' : 'Create New User'}</h2>\n            \n            {submitError && (\n                <div className=\"error-message\">{submitError}</div>\n            )}\n            \n            <form onSubmit={handleSubmit} className=\"user-form\">\n                <div className=\"form-group\">\n                    <label htmlFor=\"username\">Username</label>\n                    <input\n                        type=\"text\"\n                        id=\"username\"\n                        name=\"username\"\n                        value={formData.username}\n                        onChange={handleChange}\n                        className={errors.username ? 'error' : ''}\n                    />\n                    {errors.username && <div className=\"error-text\">{errors.username}</div>}\n                </div>\n                \n                <div className=\"form-group\">\n                    <label htmlFor=\"password\">\n                        {isEditMode ? 'New Password (leave blank to keep current)' : 'Password'}\n                    </label>\n                    <input\n                        type=\"password\"\n                        id=\"password\"\n                        name=\"password\"\n                        value={formData.password}\n                        onChange={handleChange}\n                        className={errors.password ? 'error' : ''}\n                    />\n                    {errors.password && <div className=\"error-text\">{errors.password}</div>}\n                </div>\n                \n                <div className=\"form-group\">\n                    <label htmlFor=\"role\">Role</label>\n                    <select\n                        id=\"role\"\n                        name=\"role\"\n                        value={formData.role}\n                        onChange={handleChange}\n                    >\n                        <option value=\"user\">User</option>\n                        <option value=\"admin\">Admin</option>\n                    </select>\n                </div>\n                \n                <div className=\"form-actions\">\n                    <button \n                        type=\"button\" \n                        className=\"cancel-button\"\n                        onClick={onCancel}\n                    >\n                        Cancel\n                    </button>\n                    <button \n                        type=\"submit\" \n                        className=\"save-button\"\n                        disabled={loading}\n                    >\n                        {loading ? 'Saving...' : isEditMode ? 'Update User' : 'Create User'}\n                    </button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default UserForm;\n","import React, { useState } from 'react';\nimport UserForm from './UserForm';\nimport { createUser } from '../../services/api';\nimport './UserCreate.css';\n\nconst UserCreate = ({ onSave, onCancel }) => {\n    const [message, setMessage] = useState('');\n    const [error, setError] = useState('');\n\n    const handleSaveUser = async (userData) => {\n        try {\n            const response = await createUser(userData);\n            setMessage('User created successfully');\n            setError('');\n            \n            if (onSave) {\n                onSave(response);\n            }\n            \n            return response;\n        } catch (err) {\n            const errorMessage = err.response?.data?.message || 'Error creating user';\n            setError(errorMessage);\n            throw err;\n        }\n    };\n\n    return (\n        <div className=\"user-create-container\">\n            {message && <p className=\"success-message\">{message}</p>}\n            {error && <p className=\"error-message\">{error}</p>}\n            \n            <UserForm \n                onSave={handleSaveUser} \n                onCancel={onCancel} \n            />\n        </div>\n    );\n};\n\nexport default UserCreate;","import React from 'react';\nimport { useEffect, useState, useRef } from 'react';\nimport { getUsers, deleteUser, getUserPassword } from '../../services/api';\nimport UserCreate from '../User/UserCreate';\nimport UserForm from '../User/UserForm';\nimport './AdminDashboard.css';\n\nconst AdminDashboard = () => {\n    const [users, setUsers] = useState([]);\n    const [clients, setClients] = useState([]);\n    const [stats, setStats] = useState({\n        totalUsers: 0,\n        totalClients: 0,\n        activeClients: 0\n    });\n    const [isAddingUser, setIsAddingUser] = useState(false);\n    const [editingUser, setEditingUser] = useState(null);\n    const [errorMessage, setErrorMessage] = useState('');\n    const [passwordView, setPasswordView] = useState({\n        userId: null,\n        username: '',\n        hashedPassword: '',\n        isVisible: false,\n        showPassword: false\n    });\n    const passwordModalRef = useRef(null);\n\n    useEffect(() => {\n        fetchUsers();\n        fetchStats();\n    }, []);\n\n    useEffect(() => {\n        // Add event listener for closing the password modal when clicking outside\n        function handleClickOutside(event) {\n            if (passwordModalRef.current && !passwordModalRef.current.contains(event.target)) {\n                setPasswordView(prev => ({...prev, isVisible: false}));\n            }\n        }\n        \n        // Attach the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Remove the event listener on cleanup\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [passwordModalRef]);\n\n    const fetchUsers = async () => {\n        try {\n            const response = await getUsers();\n            setUsers(response || []);\n            setStats(prevStats => ({\n                ...prevStats,\n                totalUsers: response ? response.length : 0\n            }));\n        } catch (error) {\n            console.error('Error fetching users:', error);\n            setErrorMessage('Failed to fetch users. Please try again.');\n        }\n    };\n\n    const fetchStats = async () => {\n        try {\n            // In a real app, you would call an API endpoint to get dashboard stats\n            // For now, we'll use sample data\n            setStats({\n                totalUsers: users.length,\n                totalClients: 15,\n                activeClients: 12\n            });\n        } catch (error) {\n            console.error('Error fetching stats:', error);\n        }\n    };\n\n    const handleAddUser = () => {\n        setIsAddingUser(true);\n        setEditingUser(null);\n    };\n\n    const handleEditUser = (user) => {\n        setEditingUser(user);\n        setIsAddingUser(false);\n    };\n\n    const handleUserSaved = () => {\n        setIsAddingUser(false);\n        setEditingUser(null);\n        fetchUsers();\n    };\n\n    const handleCancelUserForm = () => {\n        setIsAddingUser(false);\n        setEditingUser(null);\n    };\n\n    const handleDeleteUser = async (userId) => {\n        if (window.confirm(\"Are you sure you want to delete this user?\")) {\n            try {\n                await deleteUser(userId);\n                fetchUsers();\n            } catch (error) {\n                console.error('Error deleting user:', error);\n                setErrorMessage('Failed to delete user. Please try again.');\n            }\n        }\n    };\n\n    const handleViewPassword = async (userId, username) => {\n        try {\n            // Close the modal if clicking the same user's button when already open\n            if (passwordView.isVisible && passwordView.userId === userId) {\n                setPasswordView(prev => ({...prev, isVisible: false}));\n                return;\n            }\n\n            const response = await getUserPassword(userId);\n            setPasswordView({\n                userId,\n                username: response.username || username,\n                hashedPassword: response.hashedPassword || 'Password not available',\n                isVisible: true,\n                showPassword: false\n            });\n        } catch (error) {\n            console.error('Error fetching user password:', error);\n            setErrorMessage('Failed to fetch user password. Please try again.');\n        }\n    };\n\n    const togglePasswordVisibility = () => {\n        setPasswordView(prev => ({...prev, showPassword: !prev.showPassword}));\n    };\n\n    return (\n        <div className=\"admin-dashboard\">\n            <h1>Admin Dashboard</h1>\n            \n            {errorMessage && (\n                <div className=\"error-message\">\n                    {errorMessage}\n                    <button onClick={() => setErrorMessage('')} className=\"dismiss-button\">×</button>\n                </div>\n            )}\n            \n            <div className=\"stats-cards\">\n                <div className=\"stat-card\">\n                    <h3>Total Users</h3>\n                    <div className=\"stat-value\">{stats.totalUsers}</div>\n                </div>\n                <div className=\"stat-card\">\n                    <h3>Total Clients</h3>\n                    <div className=\"stat-value\">{stats.totalClients}</div>\n                </div>\n                <div className=\"stat-card\">\n                    <h3>Active Clients</h3>\n                    <div className=\"stat-value\">{stats.activeClients}</div>\n                </div>\n            </div>\n            \n            {isAddingUser ? (\n                <div className=\"card-section\">\n                    <div className=\"card-section-header\">\n                        <h2>Create New User</h2>\n                    </div>\n                    <div className=\"card-section-content\">\n                        <UserCreate onSave={handleUserSaved} onCancel={handleCancelUserForm} />\n                    </div>\n                </div>\n            ) : editingUser ? (\n                <div className=\"card-section\">\n                    <div className=\"card-section-header\">\n                        <h2>Edit User</h2>\n                    </div>\n                    <div className=\"card-section-content\">\n                        <UserForm \n                            user={editingUser} \n                            onSave={handleUserSaved} \n                            onCancel={handleCancelUserForm} \n                        />\n                    </div>\n                </div>\n            ) : (\n                <div className=\"card-section\">\n                    <div className=\"card-section-header\">\n                        <h2>Registered Users</h2>\n                        <button className=\"add-user-button\" onClick={handleAddUser}>\n                            <i className=\"fas fa-plus\"></i> Add User\n                        </button>\n                    </div>\n                    <div className=\"card-section-content\">\n                        <table className=\"user-table\">\n                            <thead>\n                                <tr>\n                                    <th>Username</th>\n                                    <th>Role</th>\n                                    <th>Actions</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {users.length > 0 ? (\n                                    users.map(user => (\n                                        <tr key={user._id}>\n                                            <td>{user.username}</td>\n                                            <td>\n                                                <span className={`user-role ${user.role}`}>\n                                                    {user.role}\n                                                </span>\n                                            </td>\n                                            <td>\n                                                <button \n                                                    className=\"action-button edit\"\n                                                    onClick={() => handleEditUser(user)}\n                                                >\n                                                    Edit\n                                                </button>\n                                                <button \n                                                    className=\"action-button delete\"\n                                                    onClick={() => handleDeleteUser(user._id)}\n                                                >\n                                                    Delete\n                                                </button>\n                                                <button \n                                                    className=\"action-button view-password\"\n                                                    onClick={() => handleViewPassword(user._id, user.username)}\n                                                >\n                                                    {passwordView.isVisible && passwordView.userId === user._id \n                                                        ? 'Hide Password' \n                                                        : 'View Password'}\n                                                </button>\n                                            </td>\n                                        </tr>\n                                    ))\n                                ) : (\n                                    <tr>\n                                        <td colSpan=\"3\" style={{ textAlign: 'center' }}>No users found</td>\n                                    </tr>\n                                )}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            )}\n\n            {/* Password View Modal */}\n            {passwordView.isVisible && (\n                <div className=\"password-modal-overlay\">\n                    <div className=\"password-modal\" ref={passwordModalRef}>\n                        <div className=\"password-modal-header\">\n                            <h3>Password for {passwordView.username}</h3>\n                            <button \n                                className=\"dismiss-button\" \n                                onClick={() => setPasswordView(prev => ({...prev, isVisible: false}))}\n                            >\n                                ×\n                            </button>\n                        </div>\n                        <div className=\"password-modal-content\">\n                            <div className=\"password-section\">\n                                <div className=\"password-section-header\">\n                                    <p>Hashed Password:</p>\n                                    <button \n                                        className=\"toggle-password-visibility\" \n                                        onClick={togglePasswordVisibility}\n                                    >\n                                        {passwordView.showPassword ? 'Hide' : 'Show'} Password\n                                    </button>\n                                </div>\n                                <div className=\"password-display\">\n                                    {passwordView.showPassword \n                                        ? passwordView.hashedPassword \n                                        : '••••••••••••••••••••••••••••••••••••••••'}\n                                </div>\n                            </div>\n                            <p className=\"password-note\">\n                                <i className=\"fas fa-info-circle\"></i> This is a hashed password. For security reasons, the actual password cannot be retrieved.\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default AdminDashboard;","import api from './api';\n\nconst clientService = {\n    getClients: async () => {\n        try {\n            const response = await api.get('/clients');\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching clients:', error.response || error);\n            throw error;\n        }\n    },\n\n    getClient: async (clientId) => {\n        try {\n            const response = await api.get(`/clients/${clientId}`);\n            return response.data;\n        } catch (error) {\n            console.error('Error fetching client details:', error.response || error);\n            throw error;\n        }\n    },\n\n    createClient: async (clientData) => {\n        try {\n            const response = await api.post('/clients', clientData);\n            return response.data;\n        } catch (error) {\n            console.error('Error creating client:', error.response || error);\n            throw error;\n        }\n    },\n\n    updateClient: async (clientId, clientData) => {\n        try {\n            const response = await api.put(`/clients/${clientId}`, clientData);\n            return response.data;\n        } catch (error) {\n            console.error('Error updating client:', error.response || error);\n            throw error;\n        }\n    },\n\n    deleteClient: async (clientId) => {\n        try {\n            const response = await api.delete(`/clients/${clientId}`);\n            return response.data;\n        } catch (error) {\n            console.error('Error deleting client:', error.response || error);\n            throw error;\n        }\n    }\n};\n\nexport default clientService;","import React, { useState, useEffect } from 'react';\nimport clientService from '../../services/clientService';\nimport './ClientList.css';\n\nconst ClientList = ({ onClientSelect, onCreateClient }) => {\n    const [clients, setClients] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [searchTerm, setSearchTerm] = useState('');\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        fetchClients();\n    }, []);\n\n    const fetchClients = async () => {\n        try {\n            setLoading(true);\n            const data = await clientService.getClients();\n            setClients(data);\n            setError(null);\n        } catch (err) {\n            setError('Error fetching clients. Please try again later.');\n            console.error('Error fetching clients:', err);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleDeleteClient = async (clientId) => {\n        if (window.confirm('Are you sure you want to delete this client?')) {\n            try {\n                await clientService.deleteClient(clientId);\n                setClients(clients.filter(client => client._id !== clientId));\n            } catch (err) {\n                setError('Error deleting client. Please try again.');\n                console.error('Error deleting client:', err);\n            }\n        }\n    };\n\n    // Filter clients based on search term\n    const filteredClients = clients.filter(client => \n        client.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        client.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        client.phone.includes(searchTerm) ||\n        (client.panNumber && client.panNumber.toLowerCase().includes(searchTerm.toLowerCase())) ||\n        (client.gstNumber && client.gstNumber.toLowerCase().includes(searchTerm.toLowerCase()))\n    );\n\n    return (\n        <div className=\"client-list-container\">\n            <div className=\"client-list-header\">\n                <h2>Clients</h2>\n                <button \n                    className=\"create-client-button\"\n                    onClick={onCreateClient}\n                >\n                    Add New Client\n                </button>\n            </div>\n\n            <div className=\"client-search\">\n                <input \n                    type=\"text\"\n                    placeholder=\"Search clients by name, email, phone, PAN, or GST...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                />\n            </div>\n\n            {error && <div className=\"error-message\">{error}</div>}\n            \n            {loading ? (\n                <div className=\"loading-spinner\">Loading clients...</div>\n            ) : (\n                <>\n                    {filteredClients.length === 0 ? (\n                        <p className=\"no-clients-message\">\n                            {searchTerm \n                                ? 'No clients found matching your search.' \n                                : 'No clients found. Click \"Add New Client\" to create one.'}\n                        </p>\n                    ) : (\n                        <div className=\"client-grid\">\n                            {filteredClients.map(client => (\n                                <div key={client._id} className=\"client-card\">\n                                    <div className=\"client-name\">{client.name}</div>\n                                    <div className=\"client-type\">{client.clientType}</div>\n                                    <div className=\"client-details\">\n                                        <div className=\"client-detail\">📧 {client.email}</div>\n                                        <div className=\"client-detail\">📞 {client.phone}</div>\n                                        {client.panNumber && (\n                                            <div className=\"client-detail\">🪪 PAN: {client.panNumber}</div>\n                                        )}\n                                        {client.gstNumber && (\n                                            <div className=\"client-detail\">📝 GST: {client.gstNumber}</div>\n                                        )}\n                                    </div>\n                                    <div className=\"client-actions\">\n                                        <button \n                                            className=\"action-button view-button\"\n                                            onClick={() => onClientSelect(client)}\n                                        >\n                                            View Details\n                                        </button>\n                                        <button \n                                            className=\"action-button delete-button\"\n                                            onClick={() => handleDeleteClient(client._id)}\n                                        >\n                                            Delete\n                                        </button>\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                    )}\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default ClientList;\n","import React, { useState, useEffect } from 'react';\nimport clientService from '../../services/clientService';\nimport './ClientForm.css';\n\nconst initialFormState = {\n    name: '',\n    email: '',\n    phone: '',\n    address: '',\n    panNumber: '',\n    gstNumber: '',\n    clientType: 'Individual',\n    services: [],\n    notes: ''\n};\n\nconst serviceOptions = [\n    'Income Tax Filing',\n    'GST Filing',\n    'Accounting',\n    'Audit',\n    'Company Formation',\n    'Consultancy',\n    'Other'\n];\n\nconst clientTypeOptions = [\n    'Individual',\n    'Partnership',\n    'LLP',\n    'Pvt Ltd',\n    'Public Ltd',\n    'HUF',\n    'Other'\n];\n\nconst ClientForm = ({ client, onSave, onCancel }) => {\n    const [formData, setFormData] = useState(initialFormState);\n    const [errors, setErrors] = useState({});\n    const [loading, setLoading] = useState(false);\n    const [submitError, setSubmitError] = useState(null);\n    const isEditMode = !!client?._id;\n\n    useEffect(() => {\n        if (client) {\n            setFormData({\n                name: client.name || '',\n                email: client.email || '',\n                phone: client.phone || '',\n                address: client.address || '',\n                panNumber: client.panNumber || '',\n                gstNumber: client.gstNumber || '',\n                clientType: client.clientType || 'Individual',\n                services: client.services || [],\n                notes: client.notes || ''\n            });\n        }\n    }, [client]);\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setFormData(prev => ({ ...prev, [name]: value }));\n        \n        // Clear error when field is updated\n        if (errors[name]) {\n            setErrors(prev => ({ ...prev, [name]: null }));\n        }\n    };\n\n    const handleServiceChange = (service) => {\n        setFormData(prev => {\n            const services = prev.services.includes(service)\n                ? prev.services.filter(s => s !== service)\n                : [...prev.services, service];\n            return { ...prev, services };\n        });\n    };\n\n    const validateForm = () => {\n        const newErrors = {};\n        \n        if (!formData.name.trim()) newErrors.name = 'Name is required';\n        if (!formData.email.trim()) {\n            newErrors.email = 'Email is required';\n        } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n            newErrors.email = 'Email is invalid';\n        }\n        \n        if (!formData.phone.trim()) {\n            newErrors.phone = 'Phone number is required';\n        } else if (!/^[0-9+\\s()-]{10,15}$/.test(formData.phone.replace(/\\s/g, ''))) {\n            newErrors.phone = 'Phone number is invalid';\n        }\n        \n        if (!formData.address.trim()) newErrors.address = 'Address is required';\n        \n        if (formData.panNumber && !/^[A-Z]{5}[0-9]{4}[A-Z]{1}$/.test(formData.panNumber)) {\n            newErrors.panNumber = 'PAN number should be in valid format (e.g., ABCDE1234F)';\n        }\n        \n        if (formData.gstNumber && !/^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[0-9A-Z]{1}[Z]{1}[0-9A-Z]{1}$/.test(formData.gstNumber)) {\n            newErrors.gstNumber = 'GST number should be in valid format (e.g., 22AAAAA0000A1Z5)';\n        }\n        \n        setErrors(newErrors);\n        return Object.keys(newErrors).length === 0;\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        \n        if (!validateForm()) return;\n        \n        setLoading(true);\n        setSubmitError(null);\n        \n        try {\n            let savedClient;\n            \n            if (isEditMode) {\n                savedClient = await clientService.updateClient(client._id, formData);\n            } else {\n                savedClient = await clientService.createClient(formData);\n            }\n            \n            onSave(savedClient);\n        } catch (error) {\n            console.error('Error saving client:', error);\n            setSubmitError(\n                error.response?.data?.message || \n                'Error saving client. Please try again.'\n            );\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <div className=\"client-form-container\">\n            <h2>{isEditMode ? 'Edit Client' : 'Create New Client'}</h2>\n            \n            {submitError && (\n                <div className=\"error-message\">{submitError}</div>\n            )}\n            \n            <form onSubmit={handleSubmit} className=\"client-form\">\n                <div className=\"form-section\">\n                    <h3>Basic Information</h3>\n                    \n                    <div className=\"form-group\">\n                        <label htmlFor=\"name\">Client Name *</label>\n                        <input\n                            type=\"text\"\n                            id=\"name\"\n                            name=\"name\"\n                            value={formData.name}\n                            onChange={handleChange}\n                            className={errors.name ? 'error' : ''}\n                        />\n                        {errors.name && <div className=\"error-text\">{errors.name}</div>}\n                    </div>\n                    \n                    <div className=\"form-row\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"email\">Email *</label>\n                            <input\n                                type=\"email\"\n                                id=\"email\"\n                                name=\"email\"\n                                value={formData.email}\n                                onChange={handleChange}\n                                className={errors.email ? 'error' : ''}\n                            />\n                            {errors.email && <div className=\"error-text\">{errors.email}</div>}\n                        </div>\n                        \n                        <div className=\"form-group\">\n                            <label htmlFor=\"phone\">Phone *</label>\n                            <input\n                                type=\"text\"\n                                id=\"phone\"\n                                name=\"phone\"\n                                value={formData.phone}\n                                onChange={handleChange}\n                                className={errors.phone ? 'error' : ''}\n                            />\n                            {errors.phone && <div className=\"error-text\">{errors.phone}</div>}\n                        </div>\n                    </div>\n                    \n                    <div className=\"form-group\">\n                        <label htmlFor=\"address\">Address *</label>\n                        <textarea\n                            id=\"address\"\n                            name=\"address\"\n                            value={formData.address}\n                            onChange={handleChange}\n                            className={errors.address ? 'error' : ''}\n                        />\n                        {errors.address && <div className=\"error-text\">{errors.address}</div>}\n                    </div>\n                </div>\n                \n                <div className=\"form-section\">\n                    <h3>Business Information</h3>\n                    \n                    <div className=\"form-row\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"clientType\">Client Type</label>\n                            <select\n                                id=\"clientType\"\n                                name=\"clientType\"\n                                value={formData.clientType}\n                                onChange={handleChange}\n                            >\n                                {clientTypeOptions.map(type => (\n                                    <option key={type} value={type}>{type}</option>\n                                ))}\n                            </select>\n                        </div>\n                        \n                        <div className=\"form-group\">\n                            <label htmlFor=\"panNumber\">PAN Number</label>\n                            <input\n                                type=\"text\"\n                                id=\"panNumber\"\n                                name=\"panNumber\"\n                                value={formData.panNumber}\n                                onChange={handleChange}\n                                className={errors.panNumber ? 'error' : ''}\n                            />\n                            {errors.panNumber && <div className=\"error-text\">{errors.panNumber}</div>}\n                        </div>\n                        \n                        <div className=\"form-group\">\n                            <label htmlFor=\"gstNumber\">GST Number</label>\n                            <input\n                                type=\"text\"\n                                id=\"gstNumber\"\n                                name=\"gstNumber\"\n                                value={formData.gstNumber}\n                                onChange={handleChange}\n                                className={errors.gstNumber ? 'error' : ''}\n                            />\n                            {errors.gstNumber && <div className=\"error-text\">{errors.gstNumber}</div>}\n                        </div>\n                    </div>\n                </div>\n                \n                <div className=\"form-section\">\n                    <h3>Services</h3>\n                    <div className=\"services-checkboxes\">\n                        {serviceOptions.map(service => (\n                            <div key={service} className=\"checkbox-group\">\n                                <input\n                                    type=\"checkbox\"\n                                    id={`service-${service}`}\n                                    checked={formData.services.includes(service)}\n                                    onChange={() => handleServiceChange(service)}\n                                />\n                                <label htmlFor={`service-${service}`}>{service}</label>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n                \n                <div className=\"form-section\">\n                    <h3>Additional Information</h3>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"notes\">Notes</label>\n                        <textarea\n                            id=\"notes\"\n                            name=\"notes\"\n                            value={formData.notes}\n                            onChange={handleChange}\n                            rows=\"4\"\n                        />\n                    </div>\n                </div>\n                \n                <div className=\"form-actions\">\n                    <button \n                        type=\"button\" \n                        className=\"cancel-button\"\n                        onClick={onCancel}\n                    >\n                        Cancel\n                    </button>\n                    <button \n                        type=\"submit\" \n                        className=\"save-button\"\n                        disabled={loading}\n                    >\n                        {loading ? 'Saving...' : isEditMode ? 'Update Client' : 'Create Client'}\n                    </button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default ClientForm;\n","import api from './api';\n\nconst documentService = {\n    /**\n     * Upload a document for a client\n     * \n     * @param {string} clientId - The ID of the client\n     * @param {File} file - The file to upload\n     * @returns {Promise} - Promise with uploaded document data\n     */\n    uploadDocument: async (clientId, file) => {\n        try {\n            const formData = new FormData();\n            formData.append('document', file);\n            \n            // Get auth token\n            const user = JSON.parse(localStorage.getItem('user'));\n            \n            const response = await api.post(`/clients/${clientId}/documents`, formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                    'Authorization': user && user.token ? `Bearer ${user.token}` : ''\n                }\n            });\n            return response.data;\n        } catch (error) {\n            console.error('Document upload error:', error.response || error);\n            throw error;\n        }\n    },\n\n    /**\n     * Get all documents for a client\n     * \n     * @param {string} clientId - The ID of the client\n     * @returns {Promise} - Promise with array of documents\n     */\n    getDocuments: async (clientId) => {\n        try {\n            if (!clientId) {\n                console.error('getDocuments: No client ID provided');\n                return [];\n            }\n            const response = await api.get(`/clients/${clientId}/documents`);\n            return response.data;\n        } catch (error) {\n            console.error('Error getting documents:', error.response || error);\n            throw error;\n        }\n    },\n\n    /**\n     * Get document download URL\n     * \n     * @param {string} clientId - The ID of the client\n     * @param {string} documentId - The ID of the document\n     * @returns {string} - URL to download the document\n     */\n    getDocumentUrl: (clientId, documentId) => {\n        return `${api.defaults.baseURL}/clients/${clientId}/documents/${documentId}`;\n    },\n\n    /**\n     * Delete a document\n     * \n     * @param {string} clientId - The ID of the client\n     * @param {string} documentId - The ID of the document\n     * @returns {Promise} - Promise indicating success\n     */\n    deleteDocument: async (clientId, documentId) => {\n        try {\n            if (!clientId || !documentId) {\n                console.error('deleteDocument: Missing client ID or document ID');\n                throw new Error('Missing required parameters');\n            }\n            const response = await api.delete(`/clients/${clientId}/documents/${documentId}`);\n            return response.data;\n        } catch (error) {\n            console.error('Error deleting document:', error.response || error);\n            throw error;\n        }\n    }\n};\n\nexport default documentService;\n","import React, { useState, useEffect } from 'react';\nimport documentService from '../../services/documentService';\nimport './DocumentManager.css';\n\nconst DocumentManager = ({ clientId }) => {\n    const [documents, setDocuments] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [uploading, setUploading] = useState(false);\n    const [error, setError] = useState(null);\n    const [fileToUpload, setFileToUpload] = useState(null);\n\n    useEffect(() => {\n        if (clientId) {\n            fetchDocuments();\n        } else {\n            console.warn('DocumentManager: No client ID provided');\n            setDocuments([]);\n            setLoading(false);\n        }\n    }, [clientId]);\n\n    const fetchDocuments = async () => {\n        try {\n            setLoading(true);\n            const docs = await documentService.getDocuments(clientId);\n            setDocuments(docs);\n            setError(null);\n        } catch (err) {\n            console.error('Error fetching documents:', err);\n            setError('Failed to load documents. Please try again.');\n            setDocuments([]);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleFileChange = (e) => {\n        if (e.target.files[0]) {\n            setFileToUpload(e.target.files[0]);\n        }\n    };\n\n    const handleUpload = async () => {\n        if (!fileToUpload) {\n            setError('Please select a file to upload');\n            return;\n        }\n\n        // Validate file type\n        const allowedTypes = [\n            'application/pdf',\n            'application/msword',\n            'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n            'application/vnd.ms-excel',\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n            'image/jpeg',\n            'image/png'\n        ];\n        \n        if (!allowedTypes.includes(fileToUpload.type)) {\n            setError('Invalid file type. Only PDF, Word, Excel, and image files are allowed.');\n            return;\n        }\n        \n        // Validate file size (max 10MB)\n        if (fileToUpload.size > 10 * 1024 * 1024) {\n            setError('File too large. Maximum file size is 10MB.');\n            return;\n        }\n\n        try {\n            setUploading(true);\n            setError(null);\n            await documentService.uploadDocument(clientId, fileToUpload);\n            setFileToUpload(null);\n            // Reset the file input\n            const fileInput = document.getElementById('document-upload');\n            if (fileInput) {\n                fileInput.value = '';\n            }\n            await fetchDocuments();\n        } catch (err) {\n            console.error('Error uploading document:', err);\n            setError('Failed to upload document. Please try again.');\n        } finally {\n            setUploading(false);\n        }\n    };\n\n    const handleDelete = async (documentId) => {\n        if (window.confirm('Are you sure you want to delete this document?')) {\n            try {\n                setError(null);\n                await documentService.deleteDocument(clientId, documentId);\n                \n                // Update the local state to remove the deleted document\n                setDocuments(prevDocuments => \n                    prevDocuments.filter(doc => doc._id !== documentId)\n                );\n                \n            } catch (err) {\n                console.error('Error deleting document:', err);\n                setError('Failed to delete document. Please try again.');\n                // Refresh the document list to ensure UI is in sync with server\n                fetchDocuments();\n            }\n        }\n    };\n\n    const formatFileSize = (bytes) => {\n        if (bytes < 1024) return bytes + ' bytes';\n        else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';\n        else return (bytes / 1048576).toFixed(1) + ' MB';\n    };\n\n    const formatDate = (dateString) => {\n        return new Date(dateString).toLocaleDateString('en-IN', {\n            day: 'numeric',\n            month: 'short',\n            year: 'numeric'\n        });\n    };\n\n    const getFileIcon = (type) => {\n        if (type.includes('pdf')) return '📄';\n        else if (type.includes('word')) return '📝';\n        else if (type.includes('excel') || type.includes('spreadsheet')) return '📊';\n        else if (type.includes('image')) return '🖼️';\n        else return '📎';\n    };\n\n    return (\n        <div className=\"document-manager\">\n            <div className=\"document-upload\">\n                <h3>Upload Document</h3>\n                {error && <div className=\"error-message\">{error}</div>}\n                \n                <div className=\"upload-controls\">\n                    <input \n                        type=\"file\" \n                        onChange={handleFileChange}\n                        className=\"file-input\"\n                        id=\"document-upload\"\n                        disabled={uploading}\n                    />\n                    <label htmlFor=\"document-upload\" className={`file-label ${uploading ? 'disabled' : ''}`}>\n                        {fileToUpload ? fileToUpload.name : 'Choose File'}\n                    </label>\n                    \n                    <button \n                        className=\"upload-button\"\n                        onClick={handleUpload}\n                        disabled={!fileToUpload || uploading}\n                    >\n                        {uploading ? 'Uploading...' : 'Upload'}\n                    </button>\n                </div>\n                <p className=\"upload-note\">\n                    Accepted formats: PDF, Word, Excel, and images (up to 10MB)\n                </p>\n                {uploading && (\n                    <div className=\"upload-progress\">\n                        <div className=\"progress-indicator\"></div>\n                        <p>Uploading document, please wait...</p>\n                    </div>\n                )}\n            </div>\n            \n            <div className=\"document-list\">\n                <h3>Client Documents</h3>\n                \n                {loading ? (\n                    <div className=\"loading-indicator\">Loading documents...</div>\n                ) : documents.length === 0 ? (\n                    <p className=\"no-documents\">No documents uploaded yet</p>\n                ) : (\n                    <div className=\"documents-table-container\">\n                        <table className=\"documents-table\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type</th>\n                                    <th>Size</th>\n                                    <th>Uploaded</th>\n                                    <th>Actions</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {documents.map(doc => (\n                                    <tr key={doc._id}>\n                                        <td className=\"document-name\">\n                                            <span className=\"file-icon\">{getFileIcon(doc.type)}</span>\n                                            {doc.name}\n                                        </td>\n                                        <td>{doc.type.split('/')[1].toUpperCase()}</td>\n                                        <td>{formatFileSize(doc.size)}</td>\n                                        <td>{formatDate(doc.uploadedAt)}</td>\n                                        <td className=\"document-actions\">\n                                            <a \n                                                href={documentService.getDocumentUrl(clientId, doc._id)}\n                                                target=\"_blank\"\n                                                rel=\"noopener noreferrer\"\n                                                className=\"action-button view-button\"\n                                            >\n                                                View\n                                            </a>\n                                            <button \n                                                className=\"action-button delete-button\"\n                                                onClick={() => handleDelete(doc._id)}\n                                            >\n                                                Delete\n                                            </button>\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default DocumentManager;\n","import React from 'react';\nimport DocumentManager from './DocumentManager';\nimport './ClientDetail.css';\n\nconst ClientDetail = ({ client, onEdit, onBack }) => {\n    if (!client) {\n        return <div className=\"client-detail-loading\">Loading client details...</div>;\n    }\n\n    const formatDate = (dateString) => {\n        const date = new Date(dateString);\n        return date.toLocaleDateString('en-IN', {\n            day: 'numeric',\n            month: 'short',\n            year: 'numeric'\n        });\n    };\n\n    return (\n        <div className=\"client-detail-container\">\n            <div className=\"client-detail-header\">\n                <button \n                    className=\"back-button\"\n                    onClick={onBack}\n                >\n                    ← Back to Clients\n                </button>\n                <button \n                    className=\"edit-button\"\n                    onClick={() => onEdit(client)}\n                >\n                    Edit Client\n                </button>\n            </div>\n\n            <div className=\"client-detail-card\">\n                <div className=\"client-detail-primary\">\n                    <h1 className=\"client-name\">{client.name}</h1>\n                    <span className=\"client-type\">{client.clientType}</span>\n                </div>\n\n                <div className=\"client-detail-grid\">\n                    <div className=\"detail-section\">\n                        <h3>Contact Information</h3>\n                        <div className=\"detail-item\">\n                            <span className=\"detail-label\">Email:</span>\n                            <span className=\"detail-value\">\n                                <a href={`mailto:${client.email}`}>{client.email}</a>\n                            </span>\n                        </div>\n                        <div className=\"detail-item\">\n                            <span className=\"detail-label\">Phone:</span>\n                            <span className=\"detail-value\">\n                                <a href={`tel:${client.phone}`}>{client.phone}</a>\n                            </span>\n                        </div>\n                        <div className=\"detail-item\">\n                            <span className=\"detail-label\">Address:</span>\n                            <span className=\"detail-value\">{client.address}</span>\n                        </div>\n                    </div>\n\n                    <div className=\"detail-section\">\n                        <h3>Business Information</h3>\n                        {client.panNumber && (\n                            <div className=\"detail-item\">\n                                <span className=\"detail-label\">PAN Number:</span>\n                                <span className=\"detail-value\">{client.panNumber}</span>\n                            </div>\n                        )}\n                        {client.gstNumber && (\n                            <div className=\"detail-item\">\n                                <span className=\"detail-label\">GST Number:</span>\n                                <span className=\"detail-value\">{client.gstNumber}</span>\n                            </div>\n                        )}\n                        <div className=\"detail-item\">\n                            <span className=\"detail-label\">Created:</span>\n                            <span className=\"detail-value\">{formatDate(client.createdAt)}</span>\n                        </div>\n                    </div>\n                </div>\n\n                {client.services && client.services.length > 0 && (\n                    <div className=\"detail-section\">\n                        <h3>Services</h3>\n                        <div className=\"services-list\">\n                            {client.services.map(service => (\n                                <span key={service} className=\"service-tag\">\n                                    {service}\n                                </span>\n                            ))}\n                        </div>\n                    </div>\n                )}\n\n                {client.notes && (\n                    <div className=\"detail-section notes-section\">\n                        <h3>Notes</h3>\n                        <div className=\"notes-content\">\n                            {client.notes}\n                        </div>\n                    </div>\n                )}\n            </div>\n            \n            {/* Document Manager Section */}\n            {client._id ? (\n                <DocumentManager clientId={client._id} />\n            ) : (\n                <div className=\"document-manager-error\">\n                    <p>Cannot load document manager - missing client ID.</p>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default ClientDetail;\n","import React, { useState, useEffect } from 'react';\nimport ClientList from './ClientList';\nimport ClientForm from './ClientForm';\nimport ClientDetail from './ClientDetail';\nimport clientService from '../../services/clientService';\nimport './ClientManager.css';\n\nconst VIEW_MODES = {\n    LIST: 'list',\n    CREATE: 'create',\n    EDIT: 'edit',\n    DETAIL: 'detail'\n};\n\nconst ClientManager = () => {\n    const [viewMode, setViewMode] = useState(VIEW_MODES.LIST);\n    const [selectedClient, setSelectedClient] = useState(null);\n    const [error, setError] = useState(null);\n\n    const handleClientSelect = (client) => {\n        setSelectedClient(client);\n        setViewMode(VIEW_MODES.DETAIL);\n    };\n\n    const handleCreateClient = () => {\n        setSelectedClient(null);\n        setViewMode(VIEW_MODES.CREATE);\n    };\n\n    const handleEditClient = (client) => {\n        setSelectedClient(client);\n        setViewMode(VIEW_MODES.EDIT);\n    };\n\n    const handleBack = () => {\n        setViewMode(VIEW_MODES.LIST);\n    };\n\n    const handleSaveClient = (client) => {\n        setViewMode(VIEW_MODES.DETAIL);\n        setSelectedClient(client);\n    };\n\n    const renderContent = () => {\n        switch (viewMode) {\n            case VIEW_MODES.CREATE:\n                return (\n                    <ClientForm\n                        onSave={handleSaveClient}\n                        onCancel={handleBack}\n                    />\n                );\n            case VIEW_MODES.EDIT:\n                return (\n                    <ClientForm\n                        client={selectedClient}\n                        onSave={handleSaveClient}\n                        onCancel={handleBack}\n                    />\n                );\n            case VIEW_MODES.DETAIL:\n                return (\n                    <ClientDetail\n                        client={selectedClient}\n                        onEdit={handleEditClient}\n                        onBack={handleBack}\n                    />\n                );\n            case VIEW_MODES.LIST:\n            default:\n                return (\n                    <ClientList\n                        onClientSelect={handleClientSelect}\n                        onCreateClient={handleCreateClient}\n                    />\n                );\n        }\n    };\n\n    return (\n        <div className=\"client-manager\">\n            {error && (\n                <div className=\"error-notification\">\n                    {error}\n                    <button onClick={() => setError(null)}>Dismiss</button>\n                </div>\n            )}\n            {renderContent()}\n        </div>\n    );\n};\n\nexport default ClientManager;\n","import React, { useContext } from 'react';\nimport { AuthContext } from '../../context/AuthContext';\nimport ClientManager from '../Client/ClientManager';\nimport './UserDashboard.css';\n\nconst UserDashboard = () => {\n    const { user } = useContext(AuthContext);\n\n    return (\n        <div className=\"user-dashboard\">\n            <div className=\"welcome-section\">\n                <h1>Welcome, {user?.username || 'User'}</h1>\n                <p>This is your dashboard for managing client information. Use the client manager below to view, create, edit, and manage your clients.</p>\n            </div>\n            \n            <div className=\"dashboard-content\">\n                <ClientManager />\n            </div>\n        </div>\n    );\n};\n\nexport default UserDashboard;","import React, { useContext } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { AuthContext } from '../../context/AuthContext';\n\nconst ProtectedRoute = ({ component: Component, requiredRole, ...rest }) => {\n    const { user, loading } = useContext(AuthContext);\n\n    return (\n        <Route\n            {...rest}\n            render={props => {\n                // Show loading indicator if auth state is still loading\n                if (loading) {\n                    return <div className=\"loading-screen\">Loading...</div>;\n                }\n                \n                // If not authenticated, redirect to login\n                if (!user) {\n                    return <Redirect to={{ \n                        pathname: \"/login\", \n                        state: { from: props.location } \n                    }} />;\n                }\n                \n                // If requiredRole is provided and user doesn't have that role, redirect\n                if (requiredRole && user.role !== requiredRole) {\n                    return <Redirect to={user.role === 'admin' ? '/admin' : '/user'} />;\n                }\n                \n                // If authenticated and has required role, render component\n                return <Component {...props} />;\n            }}\n        />\n    );\n};\n\nexport default ProtectedRoute;","import React, { useContext } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { AuthContext } from '../../context/AuthContext';\nimport './Header.css';\n\nconst Header = () => {\n    const { user, logout } = useContext(AuthContext);\n    const history = useHistory();\n\n    const handleLogout = async () => {\n        await logout();\n        history.push('/login');\n    };\n\n    return (\n        <header className=\"header\">\n            <div className=\"logo\">\n                <h1>CA Client Manager</h1>\n            </div>\n            {user && (\n                <>\n                    <nav className=\"navigation\">\n                        <ul>\n                            <li><Link to={user.role === 'admin' ? '/admin' : '/user'}>Dashboard</Link></li>\n                            <li><Link to=\"/clients\">Clients</Link></li>\n                            {user.role === 'admin' && <li><Link to=\"/users\">Users</Link></li>}\n                        </ul>\n                    </nav>\n                    <div className=\"user-menu\">\n                        <div className=\"user-info\">\n                            Welcome, {user.username} ({user.role})\n                        </div>\n                        <button className=\"logout-button\" onClick={handleLogout}>\n                            Logout\n                        </button>\n                    </div>\n                </>\n            )}\n        </header>\n    );\n};\n\nexport default Header;","import React, { useState, useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { AuthContext } from '../../context/AuthContext';\nimport './Sidebar.css';\n\nconst Sidebar = () => {\n    const [collapsed, setCollapsed] = useState(false);\n    const { user } = useContext(AuthContext);\n    \n    const toggleSidebar = () => {\n        setCollapsed(!collapsed);\n    };\n\n    return (\n        <div className={`sidebar ${collapsed ? 'sidebar-collapsed' : ''}`}>\n            <div className=\"sidebar-header\">\n                <h2>{!collapsed && 'Navigation'}</h2>\n                <button className=\"collapse-button\" onClick={toggleSidebar}>\n                    {collapsed ? '→' : '←'}\n                </button>\n            </div>\n            \n            <ul className=\"sidebar-menu\">\n                <li className=\"sidebar-category\">Main</li>\n                <li className=\"sidebar-item\">\n                    <NavLink \n                        to={user?.role === 'admin' ? '/admin' : '/user'} \n                        className=\"sidebar-link\" \n                        activeClassName=\"active\"\n                    >\n                        <span className=\"sidebar-icon\">📊</span>\n                        <span className=\"sidebar-text\">Dashboard</span>\n                    </NavLink>\n                </li>\n                \n                <li className=\"sidebar-category\">Management</li>\n                <li className=\"sidebar-item\">\n                    <NavLink \n                        to=\"/clients\" \n                        className=\"sidebar-link\" \n                        activeClassName=\"active\"\n                    >\n                        <span className=\"sidebar-icon\">👥</span>\n                        <span className=\"sidebar-text\">Clients</span>\n                    </NavLink>\n                </li>\n                \n                {user?.role === 'admin' && (\n                    <li className=\"sidebar-item\">\n                        <NavLink \n                            to=\"/users\" \n                            className=\"sidebar-link\" \n                            activeClassName=\"active\"\n                        >\n                            <span className=\"sidebar-icon\">👤</span>\n                            <span className=\"sidebar-text\">Users</span>\n                        </NavLink>\n                    </li>\n                )}\n                \n                <li className=\"sidebar-category\">System</li>\n                <li className=\"sidebar-item\">\n                    <NavLink \n                        to=\"/settings\" \n                        className=\"sidebar-link\" \n                        activeClassName=\"active\"\n                    >\n                        <span className=\"sidebar-icon\">⚙️</span>\n                        <span className=\"sidebar-text\">Settings</span>\n                    </NavLink>\n                </li>\n            </ul>\n        </div>\n    );\n};\n\nexport default Sidebar;","import React from 'react';\nimport './Footer.css';\n\nconst Footer = () => {\n    return (\n        <footer className=\"footer\">\n            <div className=\"footer-content\">\n                <p>&copy; {new Date().getFullYear()} CA Client Manager by KlickBurn. All rights reserved.</p>\n                <p>A beautiful and classy client management solution</p>\n            </div>\n        </footer>\n    );\n};\n\nexport default Footer;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport { AuthProvider } from './context/AuthContext';\nimport Login from './components/Auth/Login';\nimport AdminDashboard from './components/Dashboard/AdminDashboard';\nimport UserDashboard from './components/Dashboard/UserDashboard';\nimport ProtectedRoute from './components/Auth/ProtectedRoute';\nimport Header from './components/Layout/Header';\nimport Sidebar from './components/Layout/Sidebar';\nimport Footer from './components/Layout/Footer';\nimport './styles/global.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <div className=\"app-container\">\n          <Switch>\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/\" exact>\n              <Redirect to=\"/login\" />\n            </Route>\n            \n            <Route path=\"/(admin|user)\">\n              <div className=\"authenticated-container\">\n                <Header />\n                <div className=\"content-container\">\n                  <Sidebar />\n                  <main className=\"main-content\">\n                    <Switch>\n                      <ProtectedRoute \n                        path=\"/admin\" \n                        component={AdminDashboard} \n                        requiredRole=\"admin\" \n                      />\n                      <ProtectedRoute \n                        path=\"/user\" \n                        component={UserDashboard} \n                      />\n                    </Switch>\n                  </main>\n                </div>\n                <Footer />\n              </div>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { AuthProvider } from './context/AuthContext';\nimport './styles/global.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AuthProvider>\n      <App />\n    </AuthProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}