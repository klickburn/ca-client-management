{"ast":null,"code":"import api from './api';\nconst documentService = {\n  /**\n   * Upload a document for a client\n   * \n   * @param {string} clientId - The ID of the client\n   * @param {File} file - The file to upload\n   * @returns {Promise} - Promise with uploaded document data\n   */\n  uploadDocument: async (clientId, file) => {\n    try {\n      const formData = new FormData();\n      formData.append('document', file);\n\n      // Get auth token\n      const user = JSON.parse(localStorage.getItem('user'));\n      const response = await api.post(`/clients/${clientId}/documents`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          'Authorization': user && user.token ? `Bearer ${user.token}` : ''\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Document upload error:', error.response || error);\n      throw error;\n    }\n  },\n  /**\n   * Get all documents for a client\n   * \n   * @param {string} clientId - The ID of the client\n   * @returns {Promise} - Promise with array of documents\n   */\n  getDocuments: async clientId => {\n    try {\n      if (!clientId) {\n        console.error('getDocuments: No client ID provided');\n        return [];\n      }\n      const response = await api.get(`/clients/${clientId}/documents`);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting documents:', error.response || error);\n      throw error;\n    }\n  },\n  /**\n   * Get document download URL\n   * \n   * @param {string} clientId - The ID of the client\n   * @param {string} documentId - The ID of the document\n   * @returns {string} - URL to download the document\n   */\n  getDocumentUrl: (clientId, documentId) => {\n    return `${api.defaults.baseURL}/clients/${clientId}/documents/${documentId}`;\n  },\n  /**\n   * Delete a document\n   * \n   * @param {string} clientId - The ID of the client\n   * @param {string} documentId - The ID of the document\n   * @returns {Promise} - Promise indicating success\n   */\n  deleteDocument: async (clientId, documentId) => {\n    try {\n      if (!clientId || !documentId) {\n        console.error('deleteDocument: Missing client ID or document ID');\n        throw new Error('Missing required parameters');\n      }\n      const response = await api.delete(`/clients/${clientId}/documents/${documentId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting document:', error.response || error);\n      throw error;\n    }\n  }\n};\nexport default documentService;","map":{"version":3,"names":["api","documentService","uploadDocument","clientId","file","formData","FormData","append","user","JSON","parse","localStorage","getItem","response","post","headers","token","data","error","console","getDocuments","get","getDocumentUrl","documentId","defaults","baseURL","deleteDocument","Error","delete"],"sources":["/Users/klickburn/Projects/client-db/ca-client-management/frontend/src/services/documentService.js"],"sourcesContent":["import api from './api';\n\nconst documentService = {\n    /**\n     * Upload a document for a client\n     * \n     * @param {string} clientId - The ID of the client\n     * @param {File} file - The file to upload\n     * @returns {Promise} - Promise with uploaded document data\n     */\n    uploadDocument: async (clientId, file) => {\n        try {\n            const formData = new FormData();\n            formData.append('document', file);\n            \n            // Get auth token\n            const user = JSON.parse(localStorage.getItem('user'));\n            \n            const response = await api.post(`/clients/${clientId}/documents`, formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                    'Authorization': user && user.token ? `Bearer ${user.token}` : ''\n                }\n            });\n            return response.data;\n        } catch (error) {\n            console.error('Document upload error:', error.response || error);\n            throw error;\n        }\n    },\n\n    /**\n     * Get all documents for a client\n     * \n     * @param {string} clientId - The ID of the client\n     * @returns {Promise} - Promise with array of documents\n     */\n    getDocuments: async (clientId) => {\n        try {\n            if (!clientId) {\n                console.error('getDocuments: No client ID provided');\n                return [];\n            }\n            const response = await api.get(`/clients/${clientId}/documents`);\n            return response.data;\n        } catch (error) {\n            console.error('Error getting documents:', error.response || error);\n            throw error;\n        }\n    },\n\n    /**\n     * Get document download URL\n     * \n     * @param {string} clientId - The ID of the client\n     * @param {string} documentId - The ID of the document\n     * @returns {string} - URL to download the document\n     */\n    getDocumentUrl: (clientId, documentId) => {\n        return `${api.defaults.baseURL}/clients/${clientId}/documents/${documentId}`;\n    },\n\n    /**\n     * Delete a document\n     * \n     * @param {string} clientId - The ID of the client\n     * @param {string} documentId - The ID of the document\n     * @returns {Promise} - Promise indicating success\n     */\n    deleteDocument: async (clientId, documentId) => {\n        try {\n            if (!clientId || !documentId) {\n                console.error('deleteDocument: Missing client ID or document ID');\n                throw new Error('Missing required parameters');\n            }\n            const response = await api.delete(`/clients/${clientId}/documents/${documentId}`);\n            return response.data;\n        } catch (error) {\n            console.error('Error deleting document:', error.response || error);\n            throw error;\n        }\n    }\n};\n\nexport default documentService;\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,MAAMC,eAAe,GAAG;EACpB;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,cAAc,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,IAAI,KAAK;IACtC,IAAI;MACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEH,IAAI,CAAC;;MAEjC;MACA,MAAMI,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;MAErD,MAAMC,QAAQ,GAAG,MAAMb,GAAG,CAACc,IAAI,CAAC,YAAYX,QAAQ,YAAY,EAAEE,QAAQ,EAAE;QACxEU,OAAO,EAAE;UACL,cAAc,EAAE,qBAAqB;UACrC,eAAe,EAAEP,IAAI,IAAIA,IAAI,CAACQ,KAAK,GAAG,UAAUR,IAAI,CAACQ,KAAK,EAAE,GAAG;QACnE;MACJ,CAAC,CAAC;MACF,OAAOH,QAAQ,CAACI,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACL,QAAQ,IAAIK,KAAK,CAAC;MAChE,MAAMA,KAAK;IACf;EACJ,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;EACIE,YAAY,EAAE,MAAOjB,QAAQ,IAAK;IAC9B,IAAI;MACA,IAAI,CAACA,QAAQ,EAAE;QACXgB,OAAO,CAACD,KAAK,CAAC,qCAAqC,CAAC;QACpD,OAAO,EAAE;MACb;MACA,MAAML,QAAQ,GAAG,MAAMb,GAAG,CAACqB,GAAG,CAAC,YAAYlB,QAAQ,YAAY,CAAC;MAChE,OAAOU,QAAQ,CAACI,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAACL,QAAQ,IAAIK,KAAK,CAAC;MAClE,MAAMA,KAAK;IACf;EACJ,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACII,cAAc,EAAEA,CAACnB,QAAQ,EAAEoB,UAAU,KAAK;IACtC,OAAO,GAAGvB,GAAG,CAACwB,QAAQ,CAACC,OAAO,YAAYtB,QAAQ,cAAcoB,UAAU,EAAE;EAChF,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACIG,cAAc,EAAE,MAAAA,CAAOvB,QAAQ,EAAEoB,UAAU,KAAK;IAC5C,IAAI;MACA,IAAI,CAACpB,QAAQ,IAAI,CAACoB,UAAU,EAAE;QAC1BJ,OAAO,CAACD,KAAK,CAAC,kDAAkD,CAAC;QACjE,MAAM,IAAIS,KAAK,CAAC,6BAA6B,CAAC;MAClD;MACA,MAAMd,QAAQ,GAAG,MAAMb,GAAG,CAAC4B,MAAM,CAAC,YAAYzB,QAAQ,cAAcoB,UAAU,EAAE,CAAC;MACjF,OAAOV,QAAQ,CAACI,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAACL,QAAQ,IAAIK,KAAK,CAAC;MAClE,MAAMA,KAAK;IACf;EACJ;AACJ,CAAC;AAED,eAAejB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module"}