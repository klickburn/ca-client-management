{"ast":null,"code":"import api from'./api';const documentService={/**\n     * Upload a document for a client\n     * \n     * @param {string} clientId - The ID of the client\n     * @param {File} file - The file to upload\n     * @returns {Promise} - Promise with uploaded document data\n     */uploadDocument:async(clientId,file)=>{try{const formData=new FormData();formData.append('document',file);// Get auth token\nconst user=JSON.parse(localStorage.getItem('user'));const response=await api.post(`/clients/${clientId}/documents`,formData,{headers:{'Content-Type':'multipart/form-data','Authorization':user&&user.token?`Bearer ${user.token}`:''}});return response.data;}catch(error){console.error('Document upload error:',error.response||error);throw error;}},/**\n     * Get all documents for a client\n     * \n     * @param {string} clientId - The ID of the client\n     * @returns {Promise} - Promise with array of documents\n     */getDocuments:async clientId=>{try{if(!clientId){console.error('getDocuments: No client ID provided');return[];}const response=await api.get(`/clients/${clientId}/documents`);return response.data;}catch(error){console.error('Error getting documents:',error.response||error);throw error;}},/**\n     * Get document download URL\n     * \n     * @param {string} clientId - The ID of the client\n     * @param {string} documentId - The ID of the document\n     * @returns {string} - URL to download the document\n     */getDocumentUrl:(clientId,documentId)=>{return`${api.defaults.baseURL}/clients/${clientId}/documents/${documentId}`;},/**\n     * Delete a document\n     * \n     * @param {string} clientId - The ID of the client\n     * @param {string} documentId - The ID of the document\n     * @returns {Promise} - Promise indicating success\n     */deleteDocument:async(clientId,documentId)=>{try{if(!clientId||!documentId){console.error('deleteDocument: Missing client ID or document ID');throw new Error('Missing required parameters');}const response=await api.delete(`/clients/${clientId}/documents/${documentId}`);return response.data;}catch(error){console.error('Error deleting document:',error.response||error);throw error;}}};export default documentService;","map":{"version":3,"names":["api","documentService","uploadDocument","clientId","file","formData","FormData","append","user","JSON","parse","localStorage","getItem","response","post","headers","token","data","error","console","getDocuments","get","getDocumentUrl","documentId","defaults","baseURL","deleteDocument","Error","delete"],"sources":["/Users/klickburn/Projects/client-db/ca-client-management/frontend/src/services/documentService.js"],"sourcesContent":["import api from './api';\n\nconst documentService = {\n    /**\n     * Upload a document for a client\n     * \n     * @param {string} clientId - The ID of the client\n     * @param {File} file - The file to upload\n     * @returns {Promise} - Promise with uploaded document data\n     */\n    uploadDocument: async (clientId, file) => {\n        try {\n            const formData = new FormData();\n            formData.append('document', file);\n            \n            // Get auth token\n            const user = JSON.parse(localStorage.getItem('user'));\n            \n            const response = await api.post(`/clients/${clientId}/documents`, formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                    'Authorization': user && user.token ? `Bearer ${user.token}` : ''\n                }\n            });\n            return response.data;\n        } catch (error) {\n            console.error('Document upload error:', error.response || error);\n            throw error;\n        }\n    },\n\n    /**\n     * Get all documents for a client\n     * \n     * @param {string} clientId - The ID of the client\n     * @returns {Promise} - Promise with array of documents\n     */\n    getDocuments: async (clientId) => {\n        try {\n            if (!clientId) {\n                console.error('getDocuments: No client ID provided');\n                return [];\n            }\n            const response = await api.get(`/clients/${clientId}/documents`);\n            return response.data;\n        } catch (error) {\n            console.error('Error getting documents:', error.response || error);\n            throw error;\n        }\n    },\n\n    /**\n     * Get document download URL\n     * \n     * @param {string} clientId - The ID of the client\n     * @param {string} documentId - The ID of the document\n     * @returns {string} - URL to download the document\n     */\n    getDocumentUrl: (clientId, documentId) => {\n        return `${api.defaults.baseURL}/clients/${clientId}/documents/${documentId}`;\n    },\n\n    /**\n     * Delete a document\n     * \n     * @param {string} clientId - The ID of the client\n     * @param {string} documentId - The ID of the document\n     * @returns {Promise} - Promise indicating success\n     */\n    deleteDocument: async (clientId, documentId) => {\n        try {\n            if (!clientId || !documentId) {\n                console.error('deleteDocument: Missing client ID or document ID');\n                throw new Error('Missing required parameters');\n            }\n            const response = await api.delete(`/clients/${clientId}/documents/${documentId}`);\n            return response.data;\n        } catch (error) {\n            console.error('Error deleting document:', error.response || error);\n            throw error;\n        }\n    }\n};\n\nexport default documentService;\n"],"mappings":"AAAA,MAAO,CAAAA,GAAG,KAAM,OAAO,CAEvB,KAAM,CAAAC,eAAe,CAAG,CACpB;AACJ;AACA;AACA;AACA;AACA;AACA,OACIC,cAAc,CAAE,KAAAA,CAAOC,QAAQ,CAAEC,IAAI,GAAK,CACtC,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,UAAU,CAAEH,IAAI,CAAC,CAEjC;AACA,KAAM,CAAAI,IAAI,CAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CAErD,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAb,GAAG,CAACc,IAAI,CAAC,YAAYX,QAAQ,YAAY,CAAEE,QAAQ,CAAE,CACxEU,OAAO,CAAE,CACL,cAAc,CAAE,qBAAqB,CACrC,eAAe,CAAEP,IAAI,EAAIA,IAAI,CAACQ,KAAK,CAAG,UAAUR,IAAI,CAACQ,KAAK,EAAE,CAAG,EACnE,CACJ,CAAC,CAAC,CACF,MAAO,CAAAH,QAAQ,CAACI,IAAI,CACxB,CAAE,MAAOC,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAACL,QAAQ,EAAIK,KAAK,CAAC,CAChE,KAAM,CAAAA,KAAK,CACf,CACJ,CAAC,CAED;AACJ;AACA;AACA;AACA;AACA,OACIE,YAAY,CAAE,KAAO,CAAAjB,QAAQ,EAAK,CAC9B,GAAI,CACA,GAAI,CAACA,QAAQ,CAAE,CACXgB,OAAO,CAACD,KAAK,CAAC,qCAAqC,CAAC,CACpD,MAAO,EAAE,CACb,CACA,KAAM,CAAAL,QAAQ,CAAG,KAAM,CAAAb,GAAG,CAACqB,GAAG,CAAC,YAAYlB,QAAQ,YAAY,CAAC,CAChE,MAAO,CAAAU,QAAQ,CAACI,IAAI,CACxB,CAAE,MAAOC,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAACL,QAAQ,EAAIK,KAAK,CAAC,CAClE,KAAM,CAAAA,KAAK,CACf,CACJ,CAAC,CAED;AACJ;AACA;AACA;AACA;AACA;AACA,OACII,cAAc,CAAEA,CAACnB,QAAQ,CAAEoB,UAAU,GAAK,CACtC,MAAO,GAAGvB,GAAG,CAACwB,QAAQ,CAACC,OAAO,YAAYtB,QAAQ,cAAcoB,UAAU,EAAE,CAChF,CAAC,CAED;AACJ;AACA;AACA;AACA;AACA;AACA,OACIG,cAAc,CAAE,KAAAA,CAAOvB,QAAQ,CAAEoB,UAAU,GAAK,CAC5C,GAAI,CACA,GAAI,CAACpB,QAAQ,EAAI,CAACoB,UAAU,CAAE,CAC1BJ,OAAO,CAACD,KAAK,CAAC,kDAAkD,CAAC,CACjE,KAAM,IAAI,CAAAS,KAAK,CAAC,6BAA6B,CAAC,CAClD,CACA,KAAM,CAAAd,QAAQ,CAAG,KAAM,CAAAb,GAAG,CAAC4B,MAAM,CAAC,YAAYzB,QAAQ,cAAcoB,UAAU,EAAE,CAAC,CACjF,MAAO,CAAAV,QAAQ,CAACI,IAAI,CACxB,CAAE,MAAOC,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAACL,QAAQ,EAAIK,KAAK,CAAC,CAClE,KAAM,CAAAA,KAAK,CACf,CACJ,CACJ,CAAC,CAED,cAAe,CAAAjB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module"}