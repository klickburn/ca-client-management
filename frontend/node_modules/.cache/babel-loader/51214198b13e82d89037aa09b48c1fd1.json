{"ast":null,"code":"var _jsxFileName = \"/Users/klickburn/Projects/client-db/ca-client-management/frontend/src/components/Auth/ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { AuthContext } from '../../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  component: Component,\n  requiredRole,\n  ...rest\n}) => {\n  _s();\n  const {\n    user,\n    loading\n  } = useContext(AuthContext);\n  return /*#__PURE__*/_jsxDEV(Route, {\n    ...rest,\n    render: props => {\n      // Show loading indicator if auth state is still loading\n      if (loading) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-screen\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 28\n        }, this);\n      }\n\n      // If not authenticated, redirect to login\n      if (!user) {\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: {\n            pathname: \"/login\",\n            state: {\n              from: props.location\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 28\n        }, this);\n      }\n\n      // If requiredRole is provided and user doesn't have that role, redirect\n      if (requiredRole && user.role !== requiredRole) {\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: user.role === 'admin' ? '/admin' : '/user'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 28\n        }, this);\n      }\n\n      // If authenticated and has required role, render component\n      return /*#__PURE__*/_jsxDEV(Component, {\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 24\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n};\n_s(ProtectedRoute, \"nVcmz/Z77NEMBy/UMVDV0Kci2eI=\");\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useContext","Route","Redirect","AuthContext","jsxDEV","_jsxDEV","ProtectedRoute","component","Component","requiredRole","rest","_s","user","loading","render","props","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","pathname","state","from","location","role","_c","$RefreshReg$"],"sources":["/Users/klickburn/Projects/client-db/ca-client-management/frontend/src/components/Auth/ProtectedRoute.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { AuthContext } from '../../context/AuthContext';\n\nconst ProtectedRoute = ({ component: Component, requiredRole, ...rest }) => {\n    const { user, loading } = useContext(AuthContext);\n\n    return (\n        <Route\n            {...rest}\n            render={props => {\n                // Show loading indicator if auth state is still loading\n                if (loading) {\n                    return <div className=\"loading-screen\">Loading...</div>;\n                }\n                \n                // If not authenticated, redirect to login\n                if (!user) {\n                    return <Redirect to={{ \n                        pathname: \"/login\", \n                        state: { from: props.location } \n                    }} />;\n                }\n                \n                // If requiredRole is provided and user doesn't have that role, redirect\n                if (requiredRole && user.role !== requiredRole) {\n                    return <Redirect to={user.role === 'admin' ? '/admin' : '/user'} />;\n                }\n                \n                // If authenticated and has required role, render component\n                return <Component {...props} />;\n            }}\n        />\n    );\n};\n\nexport default ProtectedRoute;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AAClD,SAASC,WAAW,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,cAAc,GAAGA,CAAC;EAAEC,SAAS,EAAEC,SAAS;EAAEC,YAAY;EAAE,GAAGC;AAAK,CAAC,KAAK;EAAAC,EAAA;EACxE,MAAM;IAAEC,IAAI;IAAEC;EAAQ,CAAC,GAAGb,UAAU,CAACG,WAAW,CAAC;EAEjD,oBACIE,OAAA,CAACJ,KAAK;IAAA,GACES,IAAI;IACRI,MAAM,EAAEC,KAAK,IAAI;MACb;MACA,IAAIF,OAAO,EAAE;QACT,oBAAOR,OAAA;UAAKW,SAAS,EAAC,gBAAgB;UAAAC,QAAA,EAAC;QAAU;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAC3D;;MAEA;MACA,IAAI,CAACT,IAAI,EAAE;QACP,oBAAOP,OAAA,CAACH,QAAQ;UAACoB,EAAE,EAAE;YACjBC,QAAQ,EAAE,QAAQ;YAClBC,KAAK,EAAE;cAAEC,IAAI,EAAEV,KAAK,CAACW;YAAS;UAClC;QAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MACT;;MAEA;MACA,IAAIZ,YAAY,IAAIG,IAAI,CAACe,IAAI,KAAKlB,YAAY,EAAE;QAC5C,oBAAOJ,OAAA,CAACH,QAAQ;UAACoB,EAAE,EAAEV,IAAI,CAACe,IAAI,KAAK,OAAO,GAAG,QAAQ,GAAG;QAAQ;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MACvE;;MAEA;MACA,oBAAOhB,OAAA,CAACG,SAAS;QAAA,GAAKO;MAAK;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IACnC;EAAE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACV,EAAA,CA9BIL,cAAc;AAAAsB,EAAA,GAAdtB,cAAc;AAgCpB,eAAeA,cAAc;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}