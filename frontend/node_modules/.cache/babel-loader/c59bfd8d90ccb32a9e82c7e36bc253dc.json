{"ast":null,"code":"import api from './api';\nconst documentService = {\n  /**\n   * Upload a document for a client\n   * \n   * @param {string} clientId - The ID of the client\n   * @param {File} file - The file to upload\n   * @returns {Promise} - Promise with uploaded document data\n   */\n  uploadDocument: async (clientId, file) => {\n    try {\n      const formData = new FormData();\n      formData.append('document', file);\n      const response = await api.post(`/clients/${clientId}/documents`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  /**\n   * Get all documents for a client\n   * \n   * @param {string} clientId - The ID of the client\n   * @returns {Promise} - Promise with array of documents\n   */\n  getDocuments: async clientId => {\n    try {\n      const response = await api.get(`/clients/${clientId}/documents`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  /**\n   * Get document download URL\n   * \n   * @param {string} clientId - The ID of the client\n   * @param {string} documentId - The ID of the document\n   * @returns {string} - URL to download the document\n   */\n  getDocumentUrl: (clientId, documentId) => {\n    return `${api.defaults.baseURL}/clients/${clientId}/documents/${documentId}`;\n  },\n  /**\n   * Delete a document\n   * \n   * @param {string} clientId - The ID of the client\n   * @param {string} documentId - The ID of the document\n   * @returns {Promise} - Promise indicating success\n   */\n  deleteDocument: async (clientId, documentId) => {\n    try {\n      const response = await api.delete(`/clients/${clientId}/documents/${documentId}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\nexport default documentService;","map":{"version":3,"names":["api","documentService","uploadDocument","clientId","file","formData","FormData","append","response","post","headers","data","error","getDocuments","get","getDocumentUrl","documentId","defaults","baseURL","deleteDocument","delete"],"sources":["/Users/klickburn/Projects/client-db/ca-client-management/frontend/src/services/documentService.js"],"sourcesContent":["import api from './api';\n\nconst documentService = {\n    /**\n     * Upload a document for a client\n     * \n     * @param {string} clientId - The ID of the client\n     * @param {File} file - The file to upload\n     * @returns {Promise} - Promise with uploaded document data\n     */\n    uploadDocument: async (clientId, file) => {\n        try {\n            const formData = new FormData();\n            formData.append('document', file);\n            \n            const response = await api.post(`/clients/${clientId}/documents`, formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            });\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n\n    /**\n     * Get all documents for a client\n     * \n     * @param {string} clientId - The ID of the client\n     * @returns {Promise} - Promise with array of documents\n     */\n    getDocuments: async (clientId) => {\n        try {\n            const response = await api.get(`/clients/${clientId}/documents`);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n\n    /**\n     * Get document download URL\n     * \n     * @param {string} clientId - The ID of the client\n     * @param {string} documentId - The ID of the document\n     * @returns {string} - URL to download the document\n     */\n    getDocumentUrl: (clientId, documentId) => {\n        return `${api.defaults.baseURL}/clients/${clientId}/documents/${documentId}`;\n    },\n\n    /**\n     * Delete a document\n     * \n     * @param {string} clientId - The ID of the client\n     * @param {string} documentId - The ID of the document\n     * @returns {Promise} - Promise indicating success\n     */\n    deleteDocument: async (clientId, documentId) => {\n        try {\n            const response = await api.delete(`/clients/${clientId}/documents/${documentId}`);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    }\n};\n\nexport default documentService;\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,MAAMC,eAAe,GAAG;EACpB;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,cAAc,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,IAAI,KAAK;IACtC,IAAI;MACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEH,IAAI,CAAC;MAEjC,MAAMI,QAAQ,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,YAAYN,QAAQ,YAAY,EAAEE,QAAQ,EAAE;QACxEK,OAAO,EAAE;UACL,cAAc,EAAE;QACpB;MACJ,CAAC,CAAC;MACF,OAAOF,QAAQ,CAACG,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ,MAAMA,KAAK;IACf;EACJ,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;EACIC,YAAY,EAAE,MAAOV,QAAQ,IAAK;IAC9B,IAAI;MACA,MAAMK,QAAQ,GAAG,MAAMR,GAAG,CAACc,GAAG,CAAC,YAAYX,QAAQ,YAAY,CAAC;MAChE,OAAOK,QAAQ,CAACG,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ,MAAMA,KAAK;IACf;EACJ,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACIG,cAAc,EAAEA,CAACZ,QAAQ,EAAEa,UAAU,KAAK;IACtC,OAAO,GAAGhB,GAAG,CAACiB,QAAQ,CAACC,OAAO,YAAYf,QAAQ,cAAca,UAAU,EAAE;EAChF,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACIG,cAAc,EAAE,MAAAA,CAAOhB,QAAQ,EAAEa,UAAU,KAAK;IAC5C,IAAI;MACA,MAAMR,QAAQ,GAAG,MAAMR,GAAG,CAACoB,MAAM,CAAC,YAAYjB,QAAQ,cAAca,UAAU,EAAE,CAAC;MACjF,OAAOR,QAAQ,CAACG,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ,MAAMA,KAAK;IACf;EACJ;AACJ,CAAC;AAED,eAAeX,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module"}