{"ast":null,"code":"import React,{useContext}from'react';import{Route,Redirect}from'react-router-dom';import{AuthContext}from'../../context/AuthContext';import{jsx as _jsx}from\"react/jsx-runtime\";const ProtectedRoute=_ref=>{let{component:Component,requiredRole,...rest}=_ref;const{user,loading}=useContext(AuthContext);return/*#__PURE__*/_jsx(Route,{...rest,render:props=>{// Show loading indicator if auth state is still loading\nif(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"loading-screen\",children:\"Loading...\"});}// If not authenticated, redirect to login\nif(!user){return/*#__PURE__*/_jsx(Redirect,{to:{pathname:\"/login\",state:{from:props.location}}});}// If requiredRole is provided and user doesn't have that role, redirect\nif(requiredRole&&user.role!==requiredRole){return/*#__PURE__*/_jsx(Redirect,{to:user.role==='admin'?'/admin':'/user'});}// If authenticated and has required role, render component\nreturn/*#__PURE__*/_jsx(Component,{...props});}});};export default ProtectedRoute;","map":{"version":3,"names":["React","useContext","Route","Redirect","AuthContext","jsx","_jsx","ProtectedRoute","_ref","component","Component","requiredRole","rest","user","loading","render","props","className","children","to","pathname","state","from","location","role"],"sources":["/Users/klickburn/Projects/client-db/ca-client-management/frontend/src/components/Auth/ProtectedRoute.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { AuthContext } from '../../context/AuthContext';\n\nconst ProtectedRoute = ({ component: Component, requiredRole, ...rest }) => {\n    const { user, loading } = useContext(AuthContext);\n\n    return (\n        <Route\n            {...rest}\n            render={props => {\n                // Show loading indicator if auth state is still loading\n                if (loading) {\n                    return <div className=\"loading-screen\">Loading...</div>;\n                }\n                \n                // If not authenticated, redirect to login\n                if (!user) {\n                    return <Redirect to={{ \n                        pathname: \"/login\", \n                        state: { from: props.location } \n                    }} />;\n                }\n                \n                // If requiredRole is provided and user doesn't have that role, redirect\n                if (requiredRole && user.role !== requiredRole) {\n                    return <Redirect to={user.role === 'admin' ? '/admin' : '/user'} />;\n                }\n                \n                // If authenticated and has required role, render component\n                return <Component {...props} />;\n            }}\n        />\n    );\n};\n\nexport default ProtectedRoute;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,UAAU,KAAQ,OAAO,CACzC,OAASC,KAAK,CAAEC,QAAQ,KAAQ,kBAAkB,CAClD,OAASC,WAAW,KAAQ,2BAA2B,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAExD,KAAM,CAAAC,cAAc,CAAGC,IAAA,EAAqD,IAApD,CAAEC,SAAS,CAAEC,SAAS,CAAEC,YAAY,CAAE,GAAGC,IAAK,CAAC,CAAAJ,IAAA,CACnE,KAAM,CAAEK,IAAI,CAAEC,OAAQ,CAAC,CAAGb,UAAU,CAACG,WAAW,CAAC,CAEjD,mBACIE,IAAA,CAACJ,KAAK,KACEU,IAAI,CACRG,MAAM,CAAEC,KAAK,EAAI,CACb;AACA,GAAIF,OAAO,CAAE,CACT,mBAAOR,IAAA,QAAKW,SAAS,CAAC,gBAAgB,CAAAC,QAAA,CAAC,YAAU,CAAK,CAAC,CAC3D,CAEA;AACA,GAAI,CAACL,IAAI,CAAE,CACP,mBAAOP,IAAA,CAACH,QAAQ,EAACgB,EAAE,CAAE,CACjBC,QAAQ,CAAE,QAAQ,CAClBC,KAAK,CAAE,CAAEC,IAAI,CAAEN,KAAK,CAACO,QAAS,CAClC,CAAE,CAAE,CAAC,CACT,CAEA;AACA,GAAIZ,YAAY,EAAIE,IAAI,CAACW,IAAI,GAAKb,YAAY,CAAE,CAC5C,mBAAOL,IAAA,CAACH,QAAQ,EAACgB,EAAE,CAAEN,IAAI,CAACW,IAAI,GAAK,OAAO,CAAG,QAAQ,CAAG,OAAQ,CAAE,CAAC,CACvE,CAEA;AACA,mBAAOlB,IAAA,CAACI,SAAS,KAAKM,KAAK,CAAG,CAAC,CACnC,CAAE,CACL,CAAC,CAEV,CAAC,CAED,cAAe,CAAAT,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module"}